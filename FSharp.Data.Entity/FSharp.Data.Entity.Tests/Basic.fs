module Basic

open System
open Xunit
open FSharp.Data.Entity

//I want to call provided type DbContext not DbContextProvider
type AdventureWorks = DbContext<"Data Source=.;Initial Catalog=AdventureWorks2014;Integrated Security=True">
//but compiler gets confused therefore following line should be after TP declaration
open Microsoft.Data.Entity

let db = 
    new AdventureWorks( 
        configuring = (fun optionsBuilder -> 
            optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=AdventureWorks2014;Integrated Security=True") |> ignore
        ), 
        //default modelCreating will be generated by the type provider base on metadata. 
        modelCreating = (fun modelBuilder -> 
            modelBuilder.Entity<AdventureWorks.``HumanResources.Shift``>().ToTable("Shift", "HumanResources") |> ignore
        )
    )
    //Maybe make configuring and modelCreating to be properties instead of ctor params

[<Fact>]
let getTableContent() = 
    let expected = [|
        (1,"Day", TimeSpan.Parse("07:00:00.0000000"),TimeSpan.Parse("15:00:00.0000000"),DateTime.Parse("Apr 30 2008 12:00AM"))
        (2,"Evening", TimeSpan.Parse("15:00:00.0000000"),TimeSpan.Parse("23:00:00.0000000"),DateTime.Parse("Apr 30 2008 12:00AM"))
        (3,"Night", TimeSpan.Parse("23:00:00.0000000"),TimeSpan.Parse("07:00:00.0000000"),DateTime.Parse("Apr 30 2008 12:00AM"))
    |]

    let actual = [| for x in db.``HumanResources.ShiftTable`` -> int x.ShiftID, x.Name, x.StartTime, x.EndTime, x.ModifiedDate |]

    Assert.Equal<_[]>(expected, actual)

[<Fact>]
let linqFilterOnServer() = 
    let actual = 
        query {
            for x in db.``HumanResources.ShiftTable`` do
            where (x.ShiftID > 1uy)
            select x.Name
        }
        |> Seq.toArray
    
    Assert.Equal<_[]>(actual, [| "Evening"; "Night" |])

[<Fact>]
let linqPartiallyInLocalMemory() = 
    let actual = 
        query {
            for x in db.``HumanResources.ShiftTable`` do
            where (x.ShiftID > 1uy)
            where (x.StartTime.Hours > 15) //this is executed currently in local memory
            select x.Name
        }
        |> Seq.exactlyOne
    
    Assert.Equal<string>("Night", actual)


[<Fact>]
let insertData() = 
    let newShift = 
        new AdventureWorks.``HumanResources.Shift``(
            Name = "French coffee break", 
            StartTime = TimeSpan.FromHours 10., 
            EndTime = TimeSpan.FromHours 12.,
            ModifiedDate = DateTime.Now
        )

    let change = db.``HumanResources.ShiftTable``.Add(newShift) 
    try
        let recordsAffrected = db.SaveChanges()
        Assert.Equal(1, recordsAffrected)
        Assert.True(change.Entity.ShiftID > 0uy)
    finally
        db.``HumanResources.ShiftTable``.Remove change.Entity |> ignore
        let recordsAffrected = db.SaveChanges()
        Assert.Equal(1, recordsAffrected)



        
